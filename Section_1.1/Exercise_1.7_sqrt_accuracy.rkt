#lang sicp
(define (abs x)
  (cond ((> x 0) x)
        ((= x 0) 0)
        ((< x 0) (- x))))
(define (square x)
  (* x x))
(define (average x y)
  (/ (+ x y) 2))

(define (sqrt x)
  (define (good-enough? guess x)
    (< (abs (- (square guess) x)) 0.001))
  (define (improve guess x)
    (average guess (/ x guess)))
  (define (sqrt-iter guess)
    (if (good-enough? guess x)
        guess
        (sqrt-iter (improve guess x))))
  (sqrt-iter 1.0))

(define (new-sqrt x)
  (define (good-enough? guess x)
    (< (abs (- (square guess) x)) (* 0.001 guess)))
  (define (improve guess x)
    (average guess (/ x guess)))
  (define (new-sqrt-iter guess)
    (if (good-enough? guess x)
            guess
            (new-sqrt-iter (improve guess x))))
  (new-sqrt-iter 1.0))

;(sqrt 1)
;(sqrt 1e-2)
;(sqrt 1e-4)
;(sqrt 1e-6)
;(sqrt 1e+10)
;(sqrt 1e+11)
;(sqrt 1e+12)
;(sqrt 1e+13)

(new-sqrt 1)
(new-sqrt 1e-2)
(new-sqrt 1e-4)
(new-sqrt 1e-6)
(new-sqrt 1e+10)
(new-sqrt 1e+11)
(new-sqrt 1e+12)
(new-sqrt 1e+13)