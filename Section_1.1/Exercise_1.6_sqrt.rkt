#lang sicp
(define (sqrt x)
  (define (sqrt-iter guess)
    (if (good-enough? guess x)
        guess
        (sqrt-iter (improve guess x))))
  (sqrt-iter 1.0))
(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))
(define (improve guess x)
  (average guess (/ x guess)))
(define (new-if predicate then-clause else-clause)
  (cond (predicate then-clause)
        (else else-clause)))
(define (new-sqrt x)
  (define (new-sqrt-iter guess)
    (new-if (good-enough? guess x)
            guess
            (new-sqrt-iter (improve guess x))))
  (new-sqrt-iter 1.0))
(define (abs x)
  (cond ((> x 0) x)
        ((= x 0) 0)
        ((< x 0) (- x))))
(define (square x)
  (* x x))
(define (average x y)
  (/ (+ x y) 2))
(sqrt 2)
(new-sqrt 2)